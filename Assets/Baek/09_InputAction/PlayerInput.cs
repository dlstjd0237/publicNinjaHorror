//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Baek/09_InputAction/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""_onFloor"",
            ""id"": ""a64ffbb8-fd17-4203-a673-ea53ed943a80"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""d2b2dcda-db3b-4524-b81f-47c88f2ec9cd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""6b230a23-e237-45c8-91e2-104f98d212ea"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""8c92c39b-3259-40b2-aa8b-e4e65bd88ba2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""e4ccc79d-8441-485b-989a-fa867e61c103"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RunOn"",
                    ""type"": ""Button"",
                    ""id"": ""d588ea8e-7673-4427-bee2-2bc6fcada1b3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RunOff"",
                    ""type"": ""Button"",
                    ""id"": ""5f7d3226-56a7-4f15-9f40-acb6dbaa34ac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Quest"",
                    ""type"": ""Button"",
                    ""id"": ""c508c57d-a76a-49e2-adc5-62f4a5d80205"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Drop"",
                    ""type"": ""Button"",
                    ""id"": ""fecac958-fcac-4a5d-94a0-2c046fd20ff9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""5c528803-b2bd-4f9e-92dd-34e5e719d7db"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""366da0c5-3f71-4ab4-b709-037b79ed36c8"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""19e5f386-f154-4b74-b31c-2065dc1f32b2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""733d587e-4886-479c-9f00-cf409e9e833c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""63ee1591-f0f2-4384-9967-e7dec39ceb59"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""2bf7d683-6db3-41a8-9d11-87073e689f45"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord&Mouse"",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f6e4bca1-4fb0-438a-837f-1331208bd4d0"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keybord&Mouse"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""73398b3a-a5a3-4993-b358-a73107f3f238"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d3a3dfef-b2d7-4d0c-88c0-31cf9f600270"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RunOn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""da0d6890-45ea-44cc-aa25-ff34dd8711b1"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RunOff"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e3e6e535-ab93-42f0-b8a8-2d21601c8b29"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Quest"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""91e21d63-0fac-4c67-88fa-1ed4f0c7c0ca"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keybord&Mouse"",
            ""bindingGroup"": ""Keybord&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<VirtualMouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // _onFloor
        m__onFloor = asset.FindActionMap("_onFloor", throwIfNotFound: true);
        m__onFloor_Move = m__onFloor.FindAction("Move", throwIfNotFound: true);
        m__onFloor_Look = m__onFloor.FindAction("Look", throwIfNotFound: true);
        m__onFloor_Interact = m__onFloor.FindAction("Interact", throwIfNotFound: true);
        m__onFloor_Jump = m__onFloor.FindAction("Jump", throwIfNotFound: true);
        m__onFloor_RunOn = m__onFloor.FindAction("RunOn", throwIfNotFound: true);
        m__onFloor_RunOff = m__onFloor.FindAction("RunOff", throwIfNotFound: true);
        m__onFloor_Quest = m__onFloor.FindAction("Quest", throwIfNotFound: true);
        m__onFloor_Drop = m__onFloor.FindAction("Drop", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // _onFloor
    private readonly InputActionMap m__onFloor;
    private List<I_onFloorActions> m__onFloorActionsCallbackInterfaces = new List<I_onFloorActions>();
    private readonly InputAction m__onFloor_Move;
    private readonly InputAction m__onFloor_Look;
    private readonly InputAction m__onFloor_Interact;
    private readonly InputAction m__onFloor_Jump;
    private readonly InputAction m__onFloor_RunOn;
    private readonly InputAction m__onFloor_RunOff;
    private readonly InputAction m__onFloor_Quest;
    private readonly InputAction m__onFloor_Drop;
    public struct _onFloorActions
    {
        private @PlayerInput m_Wrapper;
        public _onFloorActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m__onFloor_Move;
        public InputAction @Look => m_Wrapper.m__onFloor_Look;
        public InputAction @Interact => m_Wrapper.m__onFloor_Interact;
        public InputAction @Jump => m_Wrapper.m__onFloor_Jump;
        public InputAction @RunOn => m_Wrapper.m__onFloor_RunOn;
        public InputAction @RunOff => m_Wrapper.m__onFloor_RunOff;
        public InputAction @Quest => m_Wrapper.m__onFloor_Quest;
        public InputAction @Drop => m_Wrapper.m__onFloor_Drop;
        public InputActionMap Get() { return m_Wrapper.m__onFloor; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(_onFloorActions set) { return set.Get(); }
        public void AddCallbacks(I_onFloorActions instance)
        {
            if (instance == null || m_Wrapper.m__onFloorActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m__onFloorActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @RunOn.started += instance.OnRunOn;
            @RunOn.performed += instance.OnRunOn;
            @RunOn.canceled += instance.OnRunOn;
            @RunOff.started += instance.OnRunOff;
            @RunOff.performed += instance.OnRunOff;
            @RunOff.canceled += instance.OnRunOff;
            @Quest.started += instance.OnQuest;
            @Quest.performed += instance.OnQuest;
            @Quest.canceled += instance.OnQuest;
            @Drop.started += instance.OnDrop;
            @Drop.performed += instance.OnDrop;
            @Drop.canceled += instance.OnDrop;
        }

        private void UnregisterCallbacks(I_onFloorActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @RunOn.started -= instance.OnRunOn;
            @RunOn.performed -= instance.OnRunOn;
            @RunOn.canceled -= instance.OnRunOn;
            @RunOff.started -= instance.OnRunOff;
            @RunOff.performed -= instance.OnRunOff;
            @RunOff.canceled -= instance.OnRunOff;
            @Quest.started -= instance.OnQuest;
            @Quest.performed -= instance.OnQuest;
            @Quest.canceled -= instance.OnQuest;
            @Drop.started -= instance.OnDrop;
            @Drop.performed -= instance.OnDrop;
            @Drop.canceled -= instance.OnDrop;
        }

        public void RemoveCallbacks(I_onFloorActions instance)
        {
            if (m_Wrapper.m__onFloorActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(I_onFloorActions instance)
        {
            foreach (var item in m_Wrapper.m__onFloorActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m__onFloorActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public _onFloorActions @_onFloor => new _onFloorActions(this);
    private int m_KeybordMouseSchemeIndex = -1;
    public InputControlScheme KeybordMouseScheme
    {
        get
        {
            if (m_KeybordMouseSchemeIndex == -1) m_KeybordMouseSchemeIndex = asset.FindControlSchemeIndex("Keybord&Mouse");
            return asset.controlSchemes[m_KeybordMouseSchemeIndex];
        }
    }
    public interface I_onFloorActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnRunOn(InputAction.CallbackContext context);
        void OnRunOff(InputAction.CallbackContext context);
        void OnQuest(InputAction.CallbackContext context);
        void OnDrop(InputAction.CallbackContext context);
    }
}
